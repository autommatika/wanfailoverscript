#!/usr/bin/env bash
#
# Linux WAN failover script.
#
# Copyright 2010 Louwrentius
#
# Licence = GNU GPL
#

VERSION=1.01
CONFIG=/etc/wfs.conf

if [ -e "$CONFIG" ]
then
    . $CONFIG
else
    PRIMARY_TARGET=74.125.77.104
    SECONDARY_TARGET=209.85.229.104
    PRIMARY_GW=10.0.0.1
    SECONDARY_GW=10.0.0.200
    INTERVAL=15
    COUNT=3
    THRESHOLD=2
    COOLDOWNDELAY=20
    MAIL_TARGET=""
    DAEMON=1
    PIDFILE=/var/run/wfs.pid
fi

PRIMARY_TARGET_FAILED=0
SECONDARY_TARGET_FAILED=0
ACTIVE_CONNECTION=""

#
# If some command must be run after a failover or restore, please specify
# the commands within these variables.
#
PRIMARY_CMD=""
SECONDARY_CMD=""

# --- do not change anything below ---


route -n | grep -w "$PRIMARY_GW" | grep -w "0.0.0.0" >> /dev/null 2>&1
if [ "$?" == "0" ]
then
    ACTIVE_CONNECTION=PRIMARY
else
    ACTIVE_CONNECTION=SECONDARY
fi

log2dsply () {
    
    if [ "$QUIET" == "0" ]
    then
        echo "$1" 
    fi
}

log2mail () {

    SUBJECT="$1"
    BODY="$2"
    if [ ! -z "$MAIL_TARGET" ]
    then
        echo "$BODY" | mail -s "$SUBJECT" "$MAIL_TARGET" &
    fi
}

log2syslog () {

    echo "$1" | logger
}

route_del () {

    route del default gw "$1"
}

if [ "$DEBUG" == "1" ]
then
    log2dsply "Currently active WAN link: $ACTIVE_CONNECTION"
fi

#
# This route allows testing if the failed primary link
# Is available again, when in failover mode.
#
route add -host "$PRIMARY_TARGET" gw "$PRIMARY_GW" >> /dev/null 2>&1
route add -host "$SECONDARY_TARGET" gw "$PRIMARY_GW" >> /dev/null 2>&1

test_target () {

    TARGET="$1"
    HOST=""

    if [ "$TARGET" == "PRIMARY" ]
    then
        HOST="$PRIMARY_TARGET"
    elif [ "$TARGET" == "SECONDARY" ]
    then
        HOST="$SECONDARY_TARGET"
    fi

    ping -c "$COUNT" "$HOST" >> /dev/null 2>&1
    if [ ! "$?" == "0" ]
    then
        if [ "$DEBUG" == "1" ]
        then
            log2dsply "Host $TARGET $HOST UNREACHABLE"
            log2syslog "Host $TARGET $HOST UNREACHABLE"
        fi

        if [ "$TARGET" == "PRIMARY" ]
        then
            ((PRIMARY_TARGET_FAILED++)) 
        fi

        if [ "$TARGET" == "SECONDARY" ]
        then
            ((SECONDARY_TARGET_FAILED++)) 
        fi
    else
        if [ "$TARGET" == "PRIMARY" ]
        then
            PRIMARY_TARGET_FAILED=0
        elif [ "$TARGET" == "SECONDARY" ]
        then
            SECONDARY_TARGET_FAILED=0
        fi

        if [ "$DEBUG" == "1" ]
        then
            log2dsply "Host $TARGET $HOST OK"
            log2syslog "Host $TARGET $HOST OK"
        fi
    fi
}


test_wan_status () {

    test_target PRIMARY
    test_target SECONDARY
}


route_add () {

    route add default gw "$1"
}

switch_to_primary () {

    route_del "$SECONDARY_GW"
    route_add "$PRIMARY_GW"
    ACTIVE_CONNECTION="PRIMARY"
}

switch_to_secondary () {

    route_del "$PRIMARY_GW"
    route_add "$SECONDARY_GW"
    ACTIVE_CONNECTION="SECONDARY"
}

check_wan_status () {

    if [ "$PRIMARY_TARGET_FAILED" -ge "$THRESHOLD" ] && [ "$SECONDARY_TARGET_FAILED" -ge "$THRESHOLD" ] && [ "$ACTIVE_CONNECTION" == "PRIMARY" ]
    then
        MSG="Primary WAN link failed. Switched to secondary link."
        BODY=`route -n`
        log2mail "$MSG" "$BODY"
        log2dsply "$MSG"
        log2syslog "$MSG"
        switch
    elif [ "$ACTIVE_CONNECTION" == "SECONDARY" ] 
    then
        if [ "$PRIMARY_TARGET_FAILED" == "0" ] || [ "$SECONDARY_TARGET_FAILED" == "0" ]
        then
            MSG="Primary WAN link OK. Switched back to primary link."
            BODY=`route -n`
            log2mail "$MSG" "$BODY"
            log2dsply "$MSG"
            log2syslog "$MSG"
            switch
        fi
    else
        if [ "$DEBUG" = "1" ]
        then
            log2dsply "WAN Link: $ACTIVE_CONNECTION"
            log2syslog "WAN Link: $ACTIVE_CONNECTION"
        fi
    fi
}

switch () {

    if [ "$ACTIVE_CONNECTION" == "PRIMARY" ]
    then
        switch_to_secondary
        if [ ! -z "$SECONDARY_CMD" ]
        then
            eval "$SECONDARY_CMD"
        fi
    elif [ "$ACTIVE_CONNECTION" == "SECONDARY" ]
    then
        switch_to_primary
        if [ ! -z "$PRIMARY_CMD" ]
        then
            eval "$PRIMARY_CMD"
        fi
    fi
    sleep "$COOLDOWNDELAY"
}

start_wfs () {

    while true
    do
        test_wan_status
        check_wan_status

        sleep "$INTERVAL"
    done
}

if [ "$DAEMON" == "0" ]
then
    log2dsply "* Starting monitoring of WAN link. *"
    log2syslog "*** Starting monitoring of WAN link. ***"
    start_wfs
else
    log2syslog "*** Starting monitoring of WAN link. ***"
    start_wfs &
    echo "$!" > "$PIDFILE"
fi
    




